@page "/Windows/PostThreadMessage"
@code {private string title = "PostThreadMessage to Console Application";}
<PageTitle>@title</PageTitle>
<h1 class="text-center">@title</h1>

<p>The PostThreadMessage
documentation is not clear about whether a message can be sent to a different
process. I thought that the documentation was just incomplete, but I tried
sending a PostThreadMessage to a console application.
I nearly gave up, then finally got it working. The following shows how it 
is used:</p>
<pre>PostThreadMessage(idThread, WM_COMMAND, (WPARAM)0, (LPARAM)0));</pre>
<p>Some programmers might think that we can't send a message to a console 
program because there is no message loop. Well we can create a message loop in a 
console program. It is possible to show a window in a console program. We don't 
need to create a window though if we use PostThreadMessage
to send the message. PostThreadMessage
uses a thread id, not a window handle.</p>
<!--
<p><a href="PostThreadMessage.cpp">PostThreadMessage.cpp</a> (and
<a href="PostThreadMessage.h">stdafx.h</a>) is a sample that can be used
to verify that it is possible and it provides the basics for doing it yourself. 
The program will:</p>
<ul>
	<li>If there is no argument for it, call itself (passing its thread id) 
		then wait for the new process to send messages</li>
	<li>If there is an argument then it will assume the argument is a thread 
		id and send a message to that thread followed by a WM_QUIT</li>
</ul>
-->
