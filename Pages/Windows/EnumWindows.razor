@page "/Windows/EnumWindows"
@code {private string title = "EnumWindows";}
<PageTitle>@title</PageTitle>
<h1 class="text-center">@title</h1>

<p>This is a console-mode program that shows a use of EnumWindows and some
	of the information that can be gotten using a windows handle. The
	EnumDesktopWindows function can be used instead of EnumWindows.
	This program can be compiled as-is by Visual C++ as a console program,
	except the GetModuleFileNameEx function uses psapi, which works for
	Windows NT (and 2000) only.</p>

<p>The output from this program is not especially pretty, but this is just a
sample use of the functions.</p>
<pre>#define STRICT  1&nbsp;
#include &lt;windows.h&gt;
#include &lt;psapi.h&gt;		// <b>NT only!</b>
#include &lt;iostream&gt;
using namespace std;
#pragma comment(lib, &quot;psapi&quot;)	// <b>NT only!</b>

BOOL CALLBACK EnumWindowsProc(HWND hWnd, LPARAM lParam) {
	DWORD dwThreadId, dwProcessId;
	HINSTANCE hInstance;
	char String[255];
	HANDLE hProcess;
if (!hWnd)
	return TRUE;		// Not a window
if (!::IsWindowVisible(hWnd))
	return TRUE;		// Not visible
if (!GETTEXT, sizeof(String), (LPARAM)String))
	return TRUE;		// No window title
hInstance = (HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE);
dwThreadId = GetWindowThreadProcessId(hWnd, &amp;dwProcessId);
hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);
cout &lt;&lt; hWnd &lt;&lt; ' ' &lt;&lt; dwProcessId &lt;&lt; '\t' &lt;&lt; String &lt;&lt; '\t';
// <b>GetModuleFileNameEx uses psapi, which works for NT only!</b>
if (GetModuleFileNameEx(hProcess, hInstance, String, sizeof(String)))
	cout &lt;&lt; String &lt;&lt; endl;
else
	cout &lt;&lt; &quot;(None)\n&quot;;
CloseHandle(hProcess);
return TRUE;
}

int main(int argc, char *argv[], char *envp[]) {
EnumWindowsProc, NULL);
return 0;
}</pre>
