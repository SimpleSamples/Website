@page "/MFC/Events"
@code {private string title = "Events";}
<PageTitle>@title</PageTitle>
<h1 class="text-center">@title</h1>

<p>The documentation of the CEvent
is not as clear as it could be. The following is an outline for one possible use of it.
This example could be used in a class that creates a thread, such as a worker thread
created by AfxBeginThread, to signal it is time for the thread to complete</p>

<p>In the class, create a pointer to an event item and to a thread and declare the thread
procedure:</p>

<pre>CEvent *m_pEvent;
CWinThread *m_pThread;
static UINT ThreadProc(CFileMonitorApp *);</pre>

<p>In the constructor, initialize them:</p>

<pre>m_pEvent = NULL;
m_pThread = NULL;</pre>

<p>Then create the event item and the thread:</p>

<pre>m_pEvent = new CEvent;
if (!m_pEvent)
    return false;
m_pEvent-&gt;ResetEvent();        // Not necessary?
m_pThread = AfxBeginThread((AFX_THREADPROC)ThreadProc, (LPVOID)this);
if (!m_pThread)
    return false;</pre>

<p>The thread then waits for it to happen. You might need to specify a
time-out interval shorter than INFINITE. Alternatively, you can use a
time-out interval of zero and periodically check to see if it is time: It is
usually important to check the WaitForSingleObject Return Value.</p>

<pre>UINT CEventApp::ThreadProc(CFileMonitorApp *pApp) {
	DWORD ReturnValue;
ReturnValue = WaitForSingleObject(pApp-&gt;m_pEvent-&gt;m_hObject, INFINITE);
return 0;
}</pre>

<p>When it is time for the thread to end:</p>

<pre>m_pEvent-&gt;SetEvent();
ReturnValue = WaitForSingleObject(m_pThread-&gt;m_hThread, INFINITE);
delete m_pEvent;</pre>
